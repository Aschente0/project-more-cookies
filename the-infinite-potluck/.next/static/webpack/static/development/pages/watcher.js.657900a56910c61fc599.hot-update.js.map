{"version":3,"file":"static/webpack/static\\development\\pages\\watcher.js.657900a56910c61fc599.hot-update.js","sources":["webpack:///./pages/watcher.js"],"sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\nimport Router from 'next/router';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.socket=io()\r\n        const config = {\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        let peerConnection;\r\n        let video = document.getElementById('video');\r\n\r\n        this.socket.on('offer', (id, message) => {\r\n            console.log(\"8) WATCHER RECEIVES offer\");\r\n            const peerConnection = new RTCPeerConnection();\r\n            peerConnection.setRemoteDescription(message)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    console.log(\"WATCHER EMITS answer\");\r\n                    this.socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.ontrack = function(event) {\r\n                console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\r\n                document.getElementById('video').srcObject = event.streams[0];\r\n            }\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n            this.socket.emit('watcher');\r\n        });\r\n        \r\n        this.socket.on('broadcaster', () => {\r\n            console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\r\n            this.socket.emit('watcher');\r\n        });\r\n\r\n        this.socket.on('dc', () => {\r\n            console.log(\"WATCHER RECEIVED DISCONNECT\");\r\n            peerConnection.close();\r\n        });\r\n\r\n        Router.beforePopState(({url, as, options}) => {\r\n            console.log(\"ATTEMPTING TO DISCONNECT AS WATCHER\");\r\n            if(as !== \"/\" || as !== \"/other\") {\r\n                window.location.href = as;\r\n                return false;\r\n            };\r\n        });\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" width=\"640\" height=\"480\" autoPlay >\r\n                </video>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAjEA;AACA;;;;;A","sourceRoot":""}