{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.0c52699a3387f30e869e.hot-update.js","sources":["webpack:///./lib/Auth.js"],"sourcesContent":["import auth0 from 'auth0-js';\r\nimport {AUTH_CONFIG} from './auth0-variables';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n/** help from https://medium.com/techintoo/setting-up-auth0-with-react-nextjs-4346c303bb5b  **/\r\n\r\nconst getQueryParams = () => {\r\n    const params = {}\r\n    window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\r\n        params[$1] = $3\r\n    })\r\n    return params\r\n}\r\n\r\nexport default class Auth {\r\n    accessToken;\r\n    idToken;\r\n    expiresAt;\r\n\r\n    auth0 = new auth0.WebAuth({\r\n        domain: AUTH_CONFIG.domain,\r\n        clientID: AUTH_CONFIG.clientId,\r\n        redirectUri: AUTH_CONFIG.callbackUrl,\r\n        responseType: 'token id_token',\r\n        scope: 'openid profile email'\r\n    });\r\n\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n        this.getAccessToken = this.getAccessToken.bind(this);\r\n        this.getIdToken = this.getIdToken.bind(this);\r\n        this.renewSession = this.renewSession.bind(this);\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    extractInfoFromHash = () => {\r\n        if (process.server) return;\r\n        const {id_token} = getQueryParams();\r\n        return {\r\n            token: id_token,\r\n            user_details: (jwtDecode(id_token))\r\n        }\r\n    }\r\n\r\n    getQueryParams = () => {\r\n        const params = {}\r\n        window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\r\n            params[$1] = $3\r\n        })\r\n        return params\r\n    }\r\n\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve)=>{\r\n            this.auth0.parseHash((err, authResult) => {\r\n                var user_details = this.extractInfoFromHash()\r\n                if (authResult && authResult.accessToken && authResult.idToken) {\r\n                    this.setSession(authResult, user_details);\r\n                    resolve(true);\r\n                } else if (err) {\r\n                    console.log(err);\r\n                    alert(`Error: ${err.error}. Check the console for further details.`);\r\n                    resolve(false);\r\n                    window.location.replace('/');\r\n                }\r\n            \r\n            });\r\n        })\r\n        \r\n    }\r\n\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n\r\n    getIdToken() {\r\n        return this.idToken;\r\n    }\r\n\r\n    setSession(authResult, user_details) {\r\n        // Set isLoggedIn flag in localStorage\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('user_details', JSON.stringify(user_details.user_details));\r\n\r\n        // Set the time that the access token will expire at\r\n        let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n        this.accessToken = authResult.accessToken;\r\n        this.idToken = authResult.idToken;\r\n        this.expiresAt = expiresAt;\r\n\r\n        // navigate to the home route\r\n        //history.replace('/home');\r\n    }\r\n\r\n    renewSession() {\r\n        this.auth0.checkSession({}, (err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n            } else if (err) {\r\n                this.logout();\r\n                console.log(err);\r\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n            }\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        // Remove tokens and expiry time\r\n        this.accessToken = null;\r\n        this.idToken = null;\r\n        this.expiresAt = 0;\r\n\r\n        // Remove isLoggedIn flag from localStorage\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('user_details');\r\n\r\n        // navigate to the home route\r\n        window.location.replace('/');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the\r\n        // access token's expiry time\r\n        let expiresAt = this.expiresAt;\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAPA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAeA;AACA;AAFA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAoBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;A","sourceRoot":""}