{"version":3,"file":"static/webpack/static\\development\\pages\\broadcaster.js.cc0ee99c2c330fedb27d.hot-update.js","sources":["webpack:///./pages/broadcaster.js"],"sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport Router from 'next/router';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Medium extends Component {\r\n    componentDidMount(){\r\n        this.socket=io();\r\n        const config = {\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        const peerConnections = {};\r\n        const video = document.getElementById('video');\r\n        const peerConnection = new RTCPeerConnection(config);\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                video.srcObject = stream;\r\n                console.log(\"1) BROADCASTER EMITS broadcaster\");\r\n                this.socket.emit('broadcaster');\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n        this.socket.on('answer', function (id, description){\r\n            console.log(\"9) BROADCASTER RECEIVES answer, SETS RD\");\r\n            peerConnections[id].setRemoteDescription(description);\r\n        });\r\n\r\n        this.socket.on('watcher', id => {\r\n            console.log(\"5) BROADCASTER RECEIVES watcher\");\r\n            const peerConnection = new RTCPeerConnection(config);\r\n            peerConnections[id] = peerConnection;\r\n            let stream = video.srcObject;\r\n            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then( () => {\r\n                console.log(\"6) BROADCASTER EMITS offer\")\r\n                this.socket.emit('offer', id, peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        this.socket.on('dc', id => {\r\n            console.log(\"BROADCASTER RECEIVED DISCONNECT\");\r\n            if(peerConnections[id]){\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            }\r\n        });\r\n\r\n        Router.beforePopState(({url, as, options}) => {\r\n            console.log(\"ATTEMPTING TO DISCONNECT AS BROADCASTER\");\r\n            if(as !== \"/\" || as !== \"/other\") {\r\n                window.location.href = as;\r\n                return false;\r\n            };\r\n        });\r\n    }    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" autoPlay>\r\n                </video>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;;;AACA;AACA;AAEA;AAAA;AAAA;AAKA;;;;AAhEA;AACA;;;;;A","sourceRoot":""}