{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport { Video } from '../components/Video'; // const Watcher = () => {\n\nvar Medium = /*#__PURE__*/function (_Component) {\n  _inherits(Medium, _Component);\n\n  function Medium(props) {\n    var _this;\n\n    _classCallCheck(this, Medium);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Medium).call(this, props));\n    _this.state = {\n      hello: ''\n    };\n    return _this;\n  }\n\n  _createClass(Medium, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.socket = io();\n      this.socket.emit('watcher');\n      this.socket.on('now', function (data) {\n        _this2.setState({\n          hello: data.message\n        });\n      });\n      var config = {\n        // eslint-disable-line no-unused-vars\n        'iceServers': [{\n          'urls': ['stun:stun.l.google.com:19302']\n        }]\n      };\n      var peerConnection;\n      var video = document.getElementById('video');\n      this.socket.on('offer', function (id, message) {\n        console.log(\"8) WATCHER RECEIVES offer\");\n        var peerConnection = new RTCPeerConnection(config);\n        peerConnection.setRemoteDescription(message).then(function () {\n          return peerConnection.createAnswer();\n        }).then(function (sdp) {\n          return peerConnection.setLocalDescription(sdp);\n        }).then(function () {\n          console.log(\"WATCHER EMITS answer\");\n\n          _this2.socket.emit('answer', id, peerConnection.localDescription);\n        });\n\n        peerConnection.onaddtrack = function (event) {\n          console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\n          document.getElementById('video').srcObject = event.streams[0];\n        };\n      });\n      this.socket.on('connect', function () {\n        _this2.socket.emit('watcher');\n      });\n      this.socket.on('broadcaster', function () {\n        console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\n\n        _this2.socket.emit('watcher');\n      }); // peerConnection.onaddstream = function (event) {\n      //     video.srcObject = event.stream;\n      //     console.log(\"VIDEO: \" + video);\n      // };\n      // console.log(\"VIDEO: outside : \" + video);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"h1\", null, this.state.hello), __jsx(\"video\", {\n        id: \"video\",\n        width: \"640\",\n        height: \"480\",\n        autoPlay: true\n      }), __jsx(\"p\", null, \"test\"));\n    }\n  }]);\n\n  return Medium;\n}(Component); //     componentDidMount(){\n//         const peerConnection = new RTCPeerConnection();\n//         const socket = io();\n//         const video = document.querySelector('#video');\n//         const test = document.querySelector('#text');\n//         test.innerHTML = `<div>watcher test</div>`;\n//         socket.on('offer', function (message){\n//             console.log(\"OFFER RECEIVED IN WATCHER\");\n//             peerConnection.setRemoteDescription(message)\n//             .then(() => peerConnection.createAnswer())\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\n//             .then(function() {\n//                 console.log(\"ANSWER: \" + peerConnection.localDescription);\n//                 socket.emit('answer', peerConnection.localDescription);\n//             });\n//         });\n//         peerConnection.onaddstream = function (event) {\n//             video.srcObject = event.stream;\n//             console.log(\"VIDEO: \" + video);\n//         };\n//         console.log(\"VIDEO: outside : \" + video);\n//     }\n//     render(){\n//         return(\n//             <>\n//             <video id=\"video\" autoPlay/>\n//             <div id=\"text\">watcher</div>\n//             </>\n//         )\n//     }\n// }\n// export default Watcher;\n\n\nexport { Medium as default };","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Video","Medium","props","state","hello","socket","emit","on","data","setState","message","config","peerConnection","video","document","getElementById","id","console","log","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","localDescription","onaddtrack","event","streams","active","srcObject"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\n// const Watcher = () => {\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.socket=io()\r\n        this.socket.emit('watcher');\r\n        this.socket.on('now', (data) => {\r\n            this.setState({\r\n                hello: data.message\r\n            });\r\n        });\r\n        const config = { // eslint-disable-line no-unused-vars\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        let peerConnection;\r\n        let video = document.getElementById('video');\r\n\r\n        this.socket.on('offer', (id, message) => {\r\n            console.log(\"8) WATCHER RECEIVES offer\");\r\n            const peerConnection = new RTCPeerConnection(config);\r\n            peerConnection.setRemoteDescription(message)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    console.log(\"WATCHER EMITS answer\");\r\n                    this.socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.onaddtrack = function(event) {\r\n                console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\r\n                document.getElementById('video').srcObject = event.streams[0];\r\n            }\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n            this.socket.emit('watcher');\r\n        });\r\n        \r\n        this.socket.on('broadcaster', () => {\r\n            console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\r\n            this.socket.emit('watcher');\r\n        });\r\n\r\n        // peerConnection.onaddstream = function (event) {\r\n        //     video.srcObject = event.stream;\r\n        //     console.log(\"VIDEO: \" + video);\r\n        // };\r\n        // console.log(\"VIDEO: outside : \" + video);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.hello}</h1>\r\n                <video id=\"video\" width=\"640\" height=\"480\" autoPlay >\r\n                </video>\r\n                <p>test</p>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n//     componentDidMount(){\r\n//         const peerConnection = new RTCPeerConnection();\r\n\r\n//         const socket = io();\r\n//         const video = document.querySelector('#video');\r\n\r\n//         const test = document.querySelector('#text');\r\n//         test.innerHTML = `<div>watcher test</div>`;\r\n\r\n//         socket.on('offer', function (message){\r\n//             console.log(\"OFFER RECEIVED IN WATCHER\");\r\n//             peerConnection.setRemoteDescription(message)\r\n//             .then(() => peerConnection.createAnswer())\r\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\r\n//             .then(function() {\r\n//                 console.log(\"ANSWER: \" + peerConnection.localDescription);\r\n//                 socket.emit('answer', peerConnection.localDescription);\r\n//             });\r\n//         });\r\n\r\n//         peerConnection.onaddstream = function (event) {\r\n//             video.srcObject = event.stream;\r\n//             console.log(\"VIDEO: \" + video);\r\n//         };\r\n//         console.log(\"VIDEO: outside : \" + video);\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <>\r\n//             <video id=\"video\" autoPlay/>\r\n//             <div id=\"text\">watcher</div>\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n// export default Watcher;"]},"metadata":{},"sourceType":"module"}