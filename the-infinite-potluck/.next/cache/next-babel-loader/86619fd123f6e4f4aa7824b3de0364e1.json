{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom'; // const Broadcaster = () => {\n\nvar Medium = /*#__PURE__*/function (_Component) {\n  _inherits(Medium, _Component);\n\n  function Medium(props) {\n    var _this;\n\n    _classCallCheck(this, Medium);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Medium).call(this, props));\n    _this.state = {\n      hello: ''\n    };\n    return _this;\n  }\n\n  _createClass(Medium, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      document.getElementById(\"test\").innerHTML = \"tf bro\";\n      this.socket = io();\n      this.socket.emit('broadcaster');\n      this.socket.on('now', function (data) {\n        _this2.setState({\n          hello: data.message\n        });\n      });\n      var video = document.getElementById('video');\n      var peerConnection = new RTCPeerConnection();\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(function (stream) {\n        document.getElementById(\"video\").srcObject = stream;\n        stream.getTracks().forEach(function (track) {\n          return peerConnection.addTrack(track, stream);\n        });\n        peerConnection.createOffer().then(function (sdp) {\n          return peerConnection.setLocalDescription(sdp);\n        }).then(function () {\n          console.log(\"OFFER: \" + peerConnection.localDescription);\n          socket.emit('offer', peerConnection.localDescription);\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n      this.socket.on('answer', function (message) {\n        peerConnection.setRemoteDescription(message);\n      });\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(function (stream) {\n        video.srcObject = stream;\n      })[\"catch\"](function (err0r) {\n        console.log(\"Something went wrong!\");\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"h1\", null, this.state.hello), __jsx(\"video\", {\n        id: \"video\",\n        autoPlay: true\n      }), __jsx(\"div\", {\n        id: \"test\"\n      }));\n    }\n  }]);\n\n  return Medium;\n}(Component); // componentDidmount(){\n//         const peerConnection = new RTCPeerConnection();\n//         const socket = io();\n//         navigator.mediaDevices.getUserMedia({\n//             video: true\n//         })\n//         .then(function(stream){\n//             peerConnection.addStream(stream);\n//             peerConnection.createOffer()\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\n//             .then(function(){\n//                 socket.emit('offer', peerConnection.localDescription);\n//             });\n//         });\n//         socket.on('answer', function (message){\n//             peerConnection.setRemoteDescription(message);\n//         });\n//     // }\n//     // render(){\n//         return(\n//             <div>\n//                 <h1>{socket.id}</h1>\n//                 <p> hello world s</p>\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\n//                 <div id=\"test\">\n//                 </div>\n//             </div>\n//         )\n//     // }\n// }\n// export default Broadcaster;\n\n\nexport { Medium as default };","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Medium","props","state","hello","document","getElementById","innerHTML","socket","emit","on","data","setState","message","video","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","getTracks","forEach","track","addTrack","createOffer","sdp","setLocalDescription","console","log","localDescription","err","setRemoteDescription","err0r"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\n// const Broadcaster = () => {\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.getElementById(\"test\").innerHTML = `tf bro`;\r\n        this.socket=io()\r\n        this.socket.emit('broadcaster');\r\n        this.socket.on('now', (data) => {\r\n            this.setState({\r\n                hello: data.message\r\n            })\r\n        })\r\n\r\n        const video = document.getElementById('video');\r\n        const peerConnection = new RTCPeerConnection();\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                document.getElementById(\"video\").srcObject = stream;\r\n                stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n                peerConnection.createOffer()\r\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                    .then(function(){\r\n                        console.log(\"OFFER: \" + peerConnection.localDescription);\r\n                        socket.emit('offer', peerConnection.localDescription);\r\n                    });\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n        this.socket.on('answer', function (message){\r\n            peerConnection.setRemoteDescription(message);\r\n        });\r\n\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((stream) => { video.srcObject = stream })\r\n            .catch(function (err0r) {\r\n                console.log(\"Something went wrong!\");\r\n            });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.hello}</h1>\r\n                <video id=\"video\" autoPlay>\r\n                </video>\r\n                <div id=\"test\">\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n    // componentDidmount(){\r\n//         const peerConnection = new RTCPeerConnection();\r\n//         const socket = io();\r\n\r\n//         navigator.mediaDevices.getUserMedia({\r\n//             video: true\r\n//         })\r\n//         .then(function(stream){\r\n//             peerConnection.addStream(stream);\r\n\r\n//             peerConnection.createOffer()\r\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\r\n//             .then(function(){\r\n//                 socket.emit('offer', peerConnection.localDescription);\r\n//             });\r\n//         });\r\n\r\n//         socket.on('answer', function (message){\r\n//             peerConnection.setRemoteDescription(message);\r\n//         });\r\n//     // }\r\n\r\n//     // render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>{socket.id}</h1>\r\n//                 <p> hello world s</p>\r\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\r\n\r\n//                 <div id=\"test\">\r\n//                 </div>\r\n//             </div>\r\n            \r\n//         )\r\n//     // }\r\n\r\n// }\r\n// export default Broadcaster;"]},"metadata":{},"sourceType":"module"}