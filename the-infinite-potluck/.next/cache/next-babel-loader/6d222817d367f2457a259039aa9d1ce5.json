{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport { Video } from '../components/Video';\nimport Router from 'next/router';\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\n\nexport default class Medium extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: ''\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io();\n    let peerConnection;\n    let video = document.getElementById('video');\n    this.socket.on('offer', (id, message) => {\n      console.log(\"8) WATCHER RECEIVES offer\");\n      const peerConnection = new RTCPeerConnection();\n      peerConnection.setRemoteDescription(message).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        console.log(\"WATCHER EMITS answer\");\n        this.socket.emit('answer', id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = function (event) {\n        console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\n        document.getElementById('video').srcObject = event.streams[0];\n      };\n    });\n    this.socket.on('connect', () => {\n      this.socket.emit('watcher');\n    });\n    this.socket.on('broadcaster', () => {\n      console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\n      this.socket.emit('watcher');\n    });\n    this.socket.on('pickstream', broadcasters => {\n      console.log(\"5) WATCHER CHOOSING STREAM\");\n      console.log(Object.keys(broadcasters)); // function pick(){\n      //     console.log(\"TEST\");\n      // };\n\n      let pick = `console.log(\"TEST\")`;\n      let pickstream = document.getElementById('pickstream');\n      Object.keys(broadcasters).forEach(function (broadcast) {\n        pickstream.innerHTML = pickstream.innerHTML + `<button id=\"${broadcast}\">${broadcast}</button>`;\n        pickstream.innerHTML = pickstream.innerHTML + `<script>\n                        function pick() {\n                            console.log(\"TEST\");\n                    </script>`;\n        document.getElementById(broadcast).addEventListener(\"click\", console.log(\"TEST\"));\n      });\n    });\n    this.socket.on('dc', () => {\n      console.log(\"WATCHER RECEIVED DISCONNECT\");\n      peerConnection.close();\n    });\n    Router.beforePopState(({\n      url,\n      as,\n      options\n    }) => {\n      console.log(\"ATTEMPTING TO DISCONNECT AS WATCHER\");\n\n      if (as !== \"/\" || as !== \"/other\") {\n        window.location.href = as;\n        return false;\n      }\n\n      ;\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"video\", {\n      id: \"video\",\n      width: \"640\",\n      height: \"480\",\n      autoPlay: true\n    }), __jsx(\"div\", {\n      id: \"pickstream\"\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Video","Router","Medium","constructor","props","state","hello","componentDidMount","socket","peerConnection","video","document","getElementById","on","id","message","console","log","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","streams","active","srcObject","broadcasters","Object","keys","pick","pickstream","forEach","broadcast","innerHTML","addEventListener","close","beforePopState","url","as","options","window","location","href"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\nimport Router from 'next/router';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.socket=io()\r\n\r\n        let peerConnection;\r\n        let video = document.getElementById('video');\r\n\r\n        this.socket.on('offer', (id, message) => {\r\n            console.log(\"8) WATCHER RECEIVES offer\");\r\n            const peerConnection = new RTCPeerConnection();\r\n            peerConnection.setRemoteDescription(message)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    console.log(\"WATCHER EMITS answer\");\r\n                    this.socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.ontrack = function(event) {\r\n                console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\r\n                document.getElementById('video').srcObject = event.streams[0];\r\n            }\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n            this.socket.emit('watcher');\r\n        });\r\n        \r\n        this.socket.on('broadcaster', () => {\r\n            console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\r\n            this.socket.emit('watcher');\r\n        });\r\n\r\n        this.socket.on('pickstream', (broadcasters) => {\r\n            console.log(\"5) WATCHER CHOOSING STREAM\");\r\n            console.log(Object.keys(broadcasters));\r\n\r\n            // function pick(){\r\n            //     console.log(\"TEST\");\r\n            // };\r\n\r\n            let pick = `console.log(\"TEST\")`;\r\n\r\n            let pickstream = document.getElementById('pickstream');\r\n            Object.keys(broadcasters).forEach((function(broadcast){\r\n                pickstream.innerHTML = pickstream.innerHTML + `<button id=\"${broadcast}\">${broadcast}</button>`;\r\n                pickstream.innerHTML = pickstream.innerHTML +\r\n                    `<script>\r\n                        function pick() {\r\n                            console.log(\"TEST\");\r\n                    </script>`;\r\n                document.getElementById(broadcast).addEventListener(\"click\", console.log(\"TEST\"));\r\n            }));\r\n\r\n\r\n            \r\n        });\r\n\r\n        this.socket.on('dc', () => {\r\n            console.log(\"WATCHER RECEIVED DISCONNECT\");\r\n            peerConnection.close();\r\n        });\r\n\r\n        Router.beforePopState(({url, as, options}) => {\r\n            console.log(\"ATTEMPTING TO DISCONNECT AS WATCHER\");\r\n            if(as !== \"/\" || as !== \"/other\") {\r\n                window.location.href = as;\r\n                return false;\r\n            };\r\n        });\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" width=\"640\" height=\"480\" autoPlay >\r\n                </video>\r\n                <div id=\"pickstream\">\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}