{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport { Video } from '../components/Video';\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\n\nexport default class Medium extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: ''\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io();\n    const config = {\n      'iceServers': [{\n        'urls': ['stun:stun.l.google.com:19302']\n      }]\n    };\n    let peerConnection;\n    let video = document.getElementById('video');\n    this.socket.on('offer', (id, message) => {\n      console.log(\"8) WATCHER RECEIVES offer\");\n      const peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(message).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        console.log(\"WATCHER EMITS answer\");\n        this.socket.emit('answer', id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = function (event) {\n        console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\n        document.getElementById('video').srcObject = event.streams[0];\n      };\n    });\n    this.socket.on('connect', () => {\n      this.socket.emit('watcher');\n    });\n    this.socket.on('broadcaster', () => {\n      console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\n      this.socket.emit('watcher');\n    });\n    this.socket.on('disconnect', () => {\n      console.log(\"WATCHER RECEIVED DISCONNECT\");\n      peerConnection.close();\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"video\", {\n      id: \"video\",\n      width: \"640\",\n      height: \"480\",\n      autoPlay: true\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Video","Medium","constructor","props","state","hello","componentDidMount","socket","config","peerConnection","video","document","getElementById","on","id","message","console","log","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","streams","active","srcObject","close"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA;;AAEA,eAAe,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAC1CK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAC;AADC,KAAX;AAGH;;AACDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,MAAL,GAAYT,EAAE,EAAd;AACA,UAAMU,MAAM,GAAG;AACX,oBAAc,CAAC;AACb,gBAAQ,CAAC,8BAAD;AADK,OAAD;AADH,KAAf;AAKA,QAAIC,cAAJ;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AAEA,SAAKL,MAAL,CAAYM,EAAZ,CAAe,OAAf,EAAwB,CAACC,EAAD,EAAKC,OAAL,KAAiB;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,YAAMR,cAAc,GAAG,IAAIS,iBAAJ,CAAsBV,MAAtB,CAAvB;AACAC,MAAAA,cAAc,CAACU,oBAAf,CAAoCJ,OAApC,EACKK,IADL,CACU,MAAMX,cAAc,CAACY,YAAf,EADhB,EAEKD,IAFL,CAEUE,GAAG,IAAIb,cAAc,CAACc,mBAAf,CAAmCD,GAAnC,CAFjB,EAGKF,IAHL,CAGU,MAAM;AACRJ,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAKV,MAAL,CAAYiB,IAAZ,CAAiB,QAAjB,EAA2BV,EAA3B,EAA+BL,cAAc,CAACgB,gBAA9C;AACH,OANL;;AAOAhB,MAAAA,cAAc,CAACiB,OAAf,GAAyB,UAASC,KAAT,EAAgB;AACrCX,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BU,KAAK,CAACC,OAAN,CAAc,CAAd,CAA3B,GAA8C,WAA9C,GAA4DD,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,MAAzF;AACAlB,QAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCkB,SAAjC,GAA6CH,KAAK,CAACC,OAAN,CAAc,CAAd,CAA7C;AACH,OAHD;AAIH,KAdD;AAgBA,SAAKrB,MAAL,CAAYM,EAAZ,CAAe,SAAf,EAA0B,MAAM;AAC5B,WAAKN,MAAL,CAAYiB,IAAZ,CAAiB,SAAjB;AACH,KAFD;AAIA,SAAKjB,MAAL,CAAYM,EAAZ,CAAe,aAAf,EAA8B,MAAM;AAChCG,MAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACA,WAAKV,MAAL,CAAYiB,IAAZ,CAAiB,SAAjB;AACH,KAHD;AAKA,SAAKjB,MAAL,CAAYM,EAAZ,CAAe,YAAf,EAA6B,MAAM;AAC/BG,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAR,MAAAA,cAAc,CAACsB,KAAf;AACH,KAHD;AAKH;;AACDhC,EAAAA,MAAM,GAAE;AACJ,WACI,mBACI;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,KAAK,EAAC,KAAxB;AAA8B,MAAA,MAAM,EAAC,KAArC;AAA2C,MAAA,QAAQ;AAAnD,MADJ,CADJ;AAOH;;AAzDyC","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.socket=io()\r\n        const config = {\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        let peerConnection;\r\n        let video = document.getElementById('video');\r\n\r\n        this.socket.on('offer', (id, message) => {\r\n            console.log(\"8) WATCHER RECEIVES offer\");\r\n            const peerConnection = new RTCPeerConnection(config);\r\n            peerConnection.setRemoteDescription(message)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    console.log(\"WATCHER EMITS answer\");\r\n                    this.socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.ontrack = function(event) {\r\n                console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0] + \" ACTIVE: \" + event.streams[0].active);\r\n                document.getElementById('video').srcObject = event.streams[0];\r\n            }\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n            this.socket.emit('watcher');\r\n        });\r\n        \r\n        this.socket.on('broadcaster', () => {\r\n            console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\r\n            this.socket.emit('watcher');\r\n        });\r\n\r\n        this.socket.on('disconnect', () => {\r\n            console.log(\"WATCHER RECEIVED DISCONNECT\");\r\n            peerConnection.close();\r\n        });\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" width=\"640\" height=\"480\" autoPlay >\r\n                </video>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}