{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport Router from 'next/router';\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\n\nexport default class Broadcaster extends Component {\n  componentDidMount() {\n    this.socket = io();\n    const peerConnections = {};\n    const video = document.getElementById('video');\n    const peerConnection = new RTCPeerConnection();\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream;\n      console.log(\"1) BROADCASTER EMITS broadcaster\");\n      this.socket.emit('broadcaster');\n    }).catch(function (err) {\n      console.log(err);\n    });\n    this.socket.on('answer', function (id, description) {\n      console.log(\"13) BROADCASTER RECEIVES answer, SETS RD\");\n      peerConnections[id].setRemoteDescription(description);\n    });\n    this.socket.on('watcher', id => {\n      console.log(\"8) BROADCASTER RECEIVES watcher\");\n      const peerConnection = new RTCPeerConnection();\n      peerConnections[id] = peerConnection;\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        console.log(\"9) BROADCASTER EMITS offer\");\n        this.socket.emit('offer', id, peerConnection.localDescription);\n      });\n    });\n    this.socket.on('dc', id => {\n      console.log(\"BROADCASTER RECEIVED DISCONNECT\");\n\n      if (peerConnections[id]) {\n        peerConnections[id].close();\n        delete peerConnections[id];\n      }\n    });\n    Router.beforePopState(({\n      url,\n      as,\n      options\n    }) => {\n      console.log(\"ATTEMPTING TO DISCONNECT AS BROADCASTER\");\n\n      if (as !== \"/\" || as !== \"/other\") {\n        window.location.href = as;\n        return false;\n      }\n\n      ;\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"video\", {\n      id: \"video\",\n      autoPlay: true\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Router","Broadcaster","componentDidMount","socket","peerConnections","video","document","getElementById","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","console","log","emit","catch","err","on","id","description","setRemoteDescription","getTracks","forEach","track","addTrack","createOffer","sdp","setLocalDescription","localDescription","close","beforePopState","url","as","options","window","location","href"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport Router from 'next/router';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Broadcaster extends Component {\r\n    componentDidMount(){\r\n        this.socket=io();\r\n        \r\n        const peerConnections = {};\r\n        const video = document.getElementById('video');\r\n        const peerConnection = new RTCPeerConnection();\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                video.srcObject = stream;\r\n                console.log(\"1) BROADCASTER EMITS broadcaster\");\r\n                this.socket.emit('broadcaster');\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n        this.socket.on('answer', function (id, description){\r\n            console.log(\"13) BROADCASTER RECEIVES answer, SETS RD\");\r\n            peerConnections[id].setRemoteDescription(description);\r\n        });\r\n\r\n        this.socket.on('watcher', id => {\r\n            console.log(\"8) BROADCASTER RECEIVES watcher\");\r\n            const peerConnection = new RTCPeerConnection();\r\n            peerConnections[id] = peerConnection;\r\n            let stream = video.srcObject;\r\n            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then( () => {\r\n                console.log(\"9) BROADCASTER EMITS offer\")\r\n                this.socket.emit('offer', id, peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        this.socket.on('dc', id => {\r\n            console.log(\"BROADCASTER RECEIVED DISCONNECT\");\r\n            if(peerConnections[id]){\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            }\r\n        });\r\n\r\n        Router.beforePopState(({url, as, options}) => {\r\n            console.log(\"ATTEMPTING TO DISCONNECT AS BROADCASTER\");\r\n            if(as !== \"/\" || as !== \"/other\") {\r\n                window.location.href = as;\r\n                return false;\r\n            };\r\n        });\r\n    }    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" autoPlay>\r\n                </video>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}