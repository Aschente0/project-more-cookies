{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\n\nexport default class Medium extends Component {\n  componentDidMount() {\n    this.socket = io();\n    const config = {\n      'iceServers': [{\n        'urls': ['stun:stun.l.google.com:19302']\n      }]\n    };\n    const peerConnections = {};\n    const video = document.getElementById('video');\n    const peerConnection = new RTCPeerConnection(config);\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream;\n      console.log(\"1) BROADCASTER EMITS broadcaster\");\n      this.socket.emit('broadcaster');\n    }).catch(function (err) {\n      console.log(err);\n    });\n    this.socket.on('answer', function (id, description) {\n      console.log(\"9) BROADCASTER RECEIVES answer, SETS RD\");\n      peerConnections[id].setRemoteDescription(description);\n    });\n    this.socket.on('watcher', id => {\n      console.log(\"5) BROADCASTER RECEIVES watcher\");\n      const peerConnection = new RTCPeerConnection(config);\n      peerConnections[id] = peerConnection;\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        console.log(\"6) BROADCASTER EMITS offer\");\n        this.socket.emit('offer', id, peerConnection.localDescription);\n      });\n    });\n    this.socket.on('disconnect', id => {\n      if (peerConnections[id]) {\n        peerConnections[id].close();\n        delete peerConnections[id];\n      }\n    });\n\n    window.onbeforeunload = function (event) {\n      // for(const peerConnection in peerConnections){\n      //     peerConnection.close();\n      // }\n      peerConnections.keys(peerConnection).forEach(key => {\n        peerConnection[key].close();\n        peerConnections[key] = null;\n      });\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"video\", {\n      id: \"video\",\n      autoPlay: true\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Medium","componentDidMount","socket","config","peerConnections","video","document","getElementById","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","console","log","emit","catch","err","on","id","description","setRemoteDescription","getTracks","forEach","track","addTrack","createOffer","sdp","setLocalDescription","localDescription","close","window","onbeforeunload","event","keys","key"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\n/***** help from https://github.com/Basscord/webrtc-video-broadcast *****/\r\n\r\nexport default class Medium extends Component {\r\n    componentDidMount(){\r\n        this.socket=io();\r\n        const config = {\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        const peerConnections = {};\r\n        const video = document.getElementById('video');\r\n        const peerConnection = new RTCPeerConnection(config);\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                video.srcObject = stream;\r\n                console.log(\"1) BROADCASTER EMITS broadcaster\");\r\n                this.socket.emit('broadcaster');\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n        this.socket.on('answer', function (id, description){\r\n            console.log(\"9) BROADCASTER RECEIVES answer, SETS RD\");\r\n            peerConnections[id].setRemoteDescription(description);\r\n        });\r\n\r\n        this.socket.on('watcher', id => {\r\n            console.log(\"5) BROADCASTER RECEIVES watcher\");\r\n            const peerConnection = new RTCPeerConnection(config);\r\n            peerConnections[id] = peerConnection;\r\n            let stream = video.srcObject;\r\n            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then( () => {\r\n                console.log(\"6) BROADCASTER EMITS offer\")\r\n                this.socket.emit('offer', id, peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        this.socket.on('disconnect', id => {\r\n            if(peerConnections[id]){\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = function(event){\r\n            // for(const peerConnection in peerConnections){\r\n            //     peerConnection.close();\r\n            // }\r\n            peerConnections.keys(peerConnection).forEach(key => {\r\n                peerConnection[key].close();\r\n                peerConnections[key]=null;\r\n            });\r\n        };\r\n    }    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <video id=\"video\" autoPlay>\r\n                </video>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}