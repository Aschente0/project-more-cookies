{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\n\nconst Watcher = () => {\n  // export default class Medium extends Component {\n  // constructor(props){\n  //     super(props);\n  //     this.state={\n  //         hello:''\n  //     }\n  // }\n  // componentDidMount(){\n  //     this.socket=io()\n  //     this.socket.emit('watcher');\n  //     this.socket.on('now', (data) => {\n  //         this.setState({\n  //             hello: data.message\n  //         })\n  //     })\n  // }\n  // render(){\n  //     return(\n  //         <div>\n  //             <h1>{this.state.hello}</h1>\n  //             <p>test</p>\n  //         </div>\n  //     )\n  // }\n  // componentDidMount(){\n  const peerConnection = new RTCPeerConnection();\n  const socket = io();\n  const video = document.querySelector('video');\n  socket.on('offer', function (message) {\n    peerConnection.setRemoteDescription(message).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(function () {\n      socket.emit('answer', peerConnection.localDescription);\n    });\n  });\n\n  peerConnection.onaddstream = function (event) {\n    video.srcObject = event.stream;\n    console.log(\"VIDEO:\" + video);\n  }; // }\n  // render(){\n\n\n  return __jsx(\"video\", {\n    id: \"video\",\n    playsInline: true,\n    autoPlay: true,\n    muted: true\n  }); // }\n};\n\nexport default Watcher;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Watcher","peerConnection","RTCPeerConnection","socket","video","document","querySelector","on","message","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","onaddstream","event","srcObject","stream","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACtB;AACI;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACI,QAAMC,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AAEA,QAAMC,MAAM,GAAGL,EAAE,EAAjB;AACA,QAAMM,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEAH,EAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,UAAUC,OAAV,EAAkB;AACjCP,IAAAA,cAAc,CAACQ,oBAAf,CAAoCD,OAApC,EACCE,IADD,CACM,MAAMT,cAAc,CAACU,YAAf,EADZ,EAECD,IAFD,CAEME,GAAG,IAAIX,cAAc,CAACY,mBAAf,CAAmCD,GAAnC,CAFb,EAGCF,IAHD,CAGM,YAAW;AACbP,MAAAA,MAAM,CAACW,IAAP,CAAY,QAAZ,EAAsBb,cAAc,CAACc,gBAArC;AACH,KALD;AAMH,GAPD;;AASAd,EAAAA,cAAc,CAACe,WAAf,GAA6B,UAAUC,KAAV,EAAiB;AAC1Cb,IAAAA,KAAK,CAACc,SAAN,GAAkBD,KAAK,CAACE,MAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWjB,KAAvB;AACH,GAHD,CA7Cc,CAiDlB;AAEA;;;AACI,SACI;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,WAAW,MAA7B;AAA8B,IAAA,QAAQ,MAAtC;AAAuC,IAAA,KAAK;AAA5C,IADJ,CApDc,CAuDlB;AACH,CAxDD;;AAyDA,eAAeJ,OAAf","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\nconst Watcher = () => {\r\n// export default class Medium extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     this.state={\r\n    //         hello:''\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.socket=io()\r\n    //     this.socket.emit('watcher');\r\n    //     this.socket.on('now', (data) => {\r\n    //         this.setState({\r\n    //             hello: data.message\r\n    //         })\r\n    //     })\r\n    // }\r\n    \r\n    // render(){\r\n    //     return(\r\n    //         <div>\r\n    //             <h1>{this.state.hello}</h1>\r\n    //             <p>test</p>\r\n    //         </div>\r\n            \r\n    //     )\r\n    // }\r\n\r\n    // componentDidMount(){\r\n        const peerConnection = new RTCPeerConnection();\r\n\r\n        const socket = io();\r\n        const video = document.querySelector('video');\r\n\r\n        socket.on('offer', function (message){\r\n            peerConnection.setRemoteDescription(message)\r\n            .then(() => peerConnection.createAnswer())\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then(function() {\r\n                socket.emit('answer', peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        peerConnection.onaddstream = function (event) {\r\n            video.srcObject = event.stream;\r\n            console.log(\"VIDEO:\" + video);\r\n        };\r\n    // }\r\n\r\n    // render(){\r\n        return(\r\n            <video id=\"video\" playsInline autoPlay muted></video>\r\n        )\r\n    // }\r\n}\r\nexport default Watcher;"]},"metadata":{},"sourceType":"module"}