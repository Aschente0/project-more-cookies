{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom'; // const Broadcaster = () => {\n\nexport default class Medium extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: ''\n    };\n  }\n\n  componentDidMount() {\n    document.getElementById(\"test\").innerHTML = `tf bro`;\n    this.socket = io();\n    this.socket.emit('broadcaster');\n    this.socket.on('now', data => {\n      this.setState({\n        hello: data.message\n      });\n    });\n    const peerConnections = {};\n    const video = document.getElementById('video');\n    const peerConnection = new RTCPeerConnection();\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream; // stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      // peerConnection.createOffer()\n      //     .then(sdp => peerConnection.setLocalDescription(sdp))\n      //     .then(() => {\n      //         console.log(\"OFFER: \" + peerConnection.localDescription);\n      //         this.socket.emit('offer', peerConnection.localDescription);\n      //     });\n\n      this.socket.emit('broadcaster');\n    }).catch(function (err) {\n      console.log(err);\n    });\n    this.socket.on('answer', function (id, description) {\n      peerConnections[id].setRemoteDescription(description);\n    });\n    this.socket.on('watcher', id => {\n      const peerConnection = new RTCPeerConnection();\n      peerConnections[id] = peerConnection;\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.socket.emit('offer', id, peerConnection.localDescription);\n      });\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream;\n    }).catch(function (err0r) {\n      console.log(\"Something went wrong!\");\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h1\", null, this.state.hello), __jsx(\"video\", {\n      id: \"video\",\n      autoPlay: true\n    }), __jsx(\"div\", {\n      id: \"test\"\n    }));\n  }\n\n} // componentDidmount(){\n//         const peerConnection = new RTCPeerConnection();\n//         const socket = io();\n//         navigator.mediaDevices.getUserMedia({\n//             video: true\n//         })\n//         .then(function(stream){\n//             peerConnection.addStream(stream);\n//             peerConnection.createOffer()\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\n//             .then(function(){\n//                 socket.emit('offer', peerConnection.localDescription);\n//             });\n//         });\n//         socket.on('answer', function (message){\n//             peerConnection.setRemoteDescription(message);\n//         });\n//     // }\n//     // render(){\n//         return(\n//             <div>\n//                 <h1>{socket.id}</h1>\n//                 <p> hello world s</p>\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\n//                 <div id=\"test\">\n//                 </div>\n//             </div>\n//         )\n//     // }\n// }\n// export default Broadcaster;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Medium","constructor","props","state","hello","componentDidMount","document","getElementById","innerHTML","socket","emit","on","data","setState","message","peerConnections","video","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","catch","err","console","log","id","description","setRemoteDescription","getTracks","forEach","track","addTrack","createOffer","sdp","setLocalDescription","localDescription","err0r"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\n// const Broadcaster = () => {\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.getElementById(\"test\").innerHTML = `tf bro`;\r\n        this.socket=io();\r\n        this.socket.emit('broadcaster');\r\n        this.socket.on('now', (data) => {\r\n            this.setState({\r\n                hello: data.message\r\n            })\r\n        })\r\n\r\n        const peerConnections = {};\r\n        const video = document.getElementById('video');\r\n        const peerConnection = new RTCPeerConnection();\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                video.srcObject = stream;\r\n                // stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n                // peerConnection.createOffer()\r\n                //     .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                //     .then(() => {\r\n                //         console.log(\"OFFER: \" + peerConnection.localDescription);\r\n                //         this.socket.emit('offer', peerConnection.localDescription);\r\n                //     });\r\n                this.socket.emit('broadcaster');\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err);\r\n            });\r\n\r\n        this.socket.on('answer', function (id, description){\r\n            peerConnections[id].setRemoteDescription(description);\r\n        });\r\n\r\n        this.socket.on('watcher', id => {\r\n            const peerConnection = new RTCPeerConnection();\r\n            peerConnections[id] = peerConnection;\r\n            let stream = video.srcObject;\r\n            stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then( () => {\r\n                this.socket.emit('offer', id, peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((stream) => { video.srcObject = stream })\r\n            .catch(function (err0r) {\r\n                console.log(\"Something went wrong!\");\r\n            });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.hello}</h1>\r\n                <video id=\"video\" autoPlay>\r\n                </video>\r\n                <div id=\"test\">\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n    // componentDidmount(){\r\n//         const peerConnection = new RTCPeerConnection();\r\n//         const socket = io();\r\n\r\n//         navigator.mediaDevices.getUserMedia({\r\n//             video: true\r\n//         })\r\n//         .then(function(stream){\r\n//             peerConnection.addStream(stream);\r\n\r\n//             peerConnection.createOffer()\r\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\r\n//             .then(function(){\r\n//                 socket.emit('offer', peerConnection.localDescription);\r\n//             });\r\n//         });\r\n\r\n//         socket.on('answer', function (message){\r\n//             peerConnection.setRemoteDescription(message);\r\n//         });\r\n//     // }\r\n\r\n//     // render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>{socket.id}</h1>\r\n//                 <p> hello world s</p>\r\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\r\n\r\n//                 <div id=\"test\">\r\n//                 </div>\r\n//             </div>\r\n            \r\n//         )\r\n//     // }\r\n\r\n// }\r\n// export default Broadcaster;"]},"metadata":{},"sourceType":"module"}