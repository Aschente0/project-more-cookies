{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport { Video } from '../components/Video'; // const Watcher = () => {\n\nexport default class Medium extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: ''\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io();\n    this.socket.emit('watcher');\n    this.socket.on('now', data => {\n      this.setState({\n        hello: data.message\n      });\n    });\n    const config = {\n      // eslint-disable-line no-unused-vars\n      'iceServers': [{\n        'urls': ['stun:stun.l.google.com:19302']\n      }]\n    };\n    let peerConnection;\n    let video = document.getElementById('video');\n    this.socket.on('offer', (id, message) => {\n      console.log(\"8) WATCHER RECEIVES offer\");\n      const peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(message).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        console.log(\"WATCHER EMITS answer\");\n        this.socket.emit('answer', id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0][0] + \" ACTIVE: \" + event.streams[0].active);\n        video.srcObject = event.streams[0];\n      };\n    });\n    this.socket.on('connect', () => {\n      this.socket.emit('watcher');\n    });\n    this.socket.on('broadcaster', () => {\n      console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\n      this.socket.emit('watcher');\n    }); // peerConnection.onaddstream = function (event) {\n    //     video.srcObject = event.stream;\n    //     console.log(\"VIDEO: \" + video);\n    // };\n    // console.log(\"VIDEO: outside : \" + video);\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h1\", null, this.state.hello), __jsx(\"video\", {\n      id: \"video\",\n      width: \"640\",\n      height: \"480\",\n      autoPlay: true\n    }), __jsx(\"p\", null, \"test\"));\n  }\n\n} //     componentDidMount(){\n//         const peerConnection = new RTCPeerConnection();\n//         const socket = io();\n//         const video = document.querySelector('#video');\n//         const test = document.querySelector('#text');\n//         test.innerHTML = `<div>watcher test</div>`;\n//         socket.on('offer', function (message){\n//             console.log(\"OFFER RECEIVED IN WATCHER\");\n//             peerConnection.setRemoteDescription(message)\n//             .then(() => peerConnection.createAnswer())\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\n//             .then(function() {\n//                 console.log(\"ANSWER: \" + peerConnection.localDescription);\n//                 socket.emit('answer', peerConnection.localDescription);\n//             });\n//         });\n//         peerConnection.onaddstream = function (event) {\n//             video.srcObject = event.stream;\n//             console.log(\"VIDEO: \" + video);\n//         };\n//         console.log(\"VIDEO: outside : \" + video);\n//     }\n//     render(){\n//         return(\n//             <>\n//             <video id=\"video\" autoPlay/>\n//             <div id=\"text\">watcher</div>\n//             </>\n//         )\n//     }\n// }\n// export default Watcher;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Video","Medium","constructor","props","state","hello","componentDidMount","socket","emit","on","data","setState","message","config","peerConnection","video","document","getElementById","id","console","log","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","localDescription","ontrack","event","streams","active","srcObject"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\n// const Watcher = () => {\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.socket=io()\r\n        this.socket.emit('watcher');\r\n        this.socket.on('now', (data) => {\r\n            this.setState({\r\n                hello: data.message\r\n            });\r\n        });\r\n        const config = { // eslint-disable-line no-unused-vars\r\n            'iceServers': [{\r\n              'urls': ['stun:stun.l.google.com:19302']\r\n            }]\r\n          };\r\n        let peerConnection;\r\n        let video = document.getElementById('video');\r\n\r\n        this.socket.on('offer', (id, message) => {\r\n            console.log(\"8) WATCHER RECEIVES offer\");\r\n            const peerConnection = new RTCPeerConnection(config);\r\n            peerConnection.setRemoteDescription(message)\r\n                .then(() => peerConnection.createAnswer())\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    console.log(\"WATCHER EMITS answer\");\r\n                    this.socket.emit('answer', id, peerConnection.localDescription);\r\n                });\r\n            peerConnection.ontrack = event => {\r\n                console.log(\"MOUNT VIDEO, STREAMS: \" + event.streams[0][0] + \" ACTIVE: \" + event.streams[0].active);\r\n                video.srcObject = event.streams[0];\r\n            }\r\n        });\r\n\r\n        this.socket.on('connect', () => {\r\n            this.socket.emit('watcher');\r\n        });\r\n        \r\n        this.socket.on('broadcaster', () => {\r\n            console.log(\"3) WATCHER RECEIVES broadcaster AND EMITS watcher\");\r\n            this.socket.emit('watcher');\r\n        });\r\n\r\n        // peerConnection.onaddstream = function (event) {\r\n        //     video.srcObject = event.stream;\r\n        //     console.log(\"VIDEO: \" + video);\r\n        // };\r\n        // console.log(\"VIDEO: outside : \" + video);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.hello}</h1>\r\n                <video id=\"video\" width=\"640\" height=\"480\" autoPlay >\r\n                </video>\r\n                <p>test</p>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n//     componentDidMount(){\r\n//         const peerConnection = new RTCPeerConnection();\r\n\r\n//         const socket = io();\r\n//         const video = document.querySelector('#video');\r\n\r\n//         const test = document.querySelector('#text');\r\n//         test.innerHTML = `<div>watcher test</div>`;\r\n\r\n//         socket.on('offer', function (message){\r\n//             console.log(\"OFFER RECEIVED IN WATCHER\");\r\n//             peerConnection.setRemoteDescription(message)\r\n//             .then(() => peerConnection.createAnswer())\r\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\r\n//             .then(function() {\r\n//                 console.log(\"ANSWER: \" + peerConnection.localDescription);\r\n//                 socket.emit('answer', peerConnection.localDescription);\r\n//             });\r\n//         });\r\n\r\n//         peerConnection.onaddstream = function (event) {\r\n//             video.srcObject = event.stream;\r\n//             console.log(\"VIDEO: \" + video);\r\n//         };\r\n//         console.log(\"VIDEO: outside : \" + video);\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <>\r\n//             <video id=\"video\" autoPlay/>\r\n//             <div id=\"text\">watcher</div>\r\n//             </>\r\n//         )\r\n//     }\r\n// }\r\n// export default Watcher;"]},"metadata":{},"sourceType":"module"}