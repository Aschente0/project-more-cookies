{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nimport { Video } from '../components/Video';\n\nconst formatName = user => user.firstName + ' ' + user.lastName;\n\nconst Welcome = ({\n  user\n}) => __jsx(\"p\", null, \"Welcome, \", formatName(user), \"!\");\n\nexport default class Broadcast extends Component {\n  // WEBCAM VIDEO PLAYBACK; WORKING\n  // componentDidMount(){\n  //     const video = document.getElementById('videoElement');\n  //     console.log(\"VIDEO: \" + video);\n  //     navigator.mediaDevices.getUserMedia({video: true, audio: true})\n  //         .then((stream) => {video.srcObject=stream})\n  //         .catch(function (err0r) {\n  //             console.log(\"Something went wrong!\");\n  //         });\n  // }\n  componentDidMount() {\n    const video = document.getElementById('videoElement');\n    console.log(\"VIDEO: \" + video);\n    const peerConnection = new RTCPeerConnection();\n    const socket = io();\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      document.getElementById(\"videoElement\").srcObject = stream;\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(function () {\n        socket.emit('offer', peerConnection.localDescription);\n      });\n    }).catch(function (err0r) {\n      console.log(\"Something went wrong!\");\n    });\n    socket.on('answer', function (message) {\n      peerConnection.setRemoteDescription(message);\n    });\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream;\n    }).catch(function (err0r) {\n      console.log(\"Something went wrong!\");\n    });\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"video\", {\n      id: \"videoElement\",\n      autoPlay: true\n    }), __jsx(\"p\", null, \" video component \"));\n  } // componentDidMount(){\n  //     const video = document.getElementById('videoElement');\n  //     console.log(\"VIDEO: \" + video);\n  //     const peerConnection = new RTCPeerConnection();\n  //     const socket = io();\n  //     navigator.mediaDevices.getUserMedia({video: true, audio: true})\n  //         .then((stream) => {\n  //             peerConnection.addStream(stream);\n  //             peerConnection.createOffer()\n  //                 .then(sdp => peerConnection.setLocalDescription(sdp))\n  //                 .then(function(){\n  //                     socket.emit('offer', peerConnection.localDescription);\n  //                 });\n  //         })\n  //         .catch(function (err0r) {\n  //             console.log(\"Something went wrong!\");\n  //         });\n  //     socket.on('answer', function (message){\n  //         peerConnection.setRemoteDescription(message);\n  //     });\n  //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n  //         .then((stream) => { video.srcObject = stream })\n  //         .catch(function (err0r) {\n  //             console.log(\"Something went wrong!\");\n  //         });\n  // }\n  // render() {\n  //     return (\n  //         <>\n  //             <video id=\"videoElement\" autoPlay>\n  //             </video>\n  //             <p> video component </p>\n  //         </>\n  //     )\n  // }\n\n\n} //WORKING VIDEO CAMERA\n\n/*\r\nexport default () => (\r\n    <Video />\r\n)\r\n*/\n//ALSO WORKS\n// const BroadcasterPage = () => (\n//     <Video />\n// )\n// export default BroadcasterPage;\n// const BroadcasterPage = () => {\n//     document.querySelector('cam').innerHTML='wew';\n//     return(\n//             <Text name=\"wew\"/>\n//     )\n//     return (\n//         <div>\n//             <video playsInline autoPlay muted></video>\n//             <script type=\"text/javascript\">\n//                 const video = document.querySelector('video');\n//                 navigator.mediaDevices.getUserMedia({video: true, audio: true})\n//                 .then((stream) => {video.srcObject=stream});\n//             </script>\n//             <p> broadcaster page </p>\n//         </div>\n//     )\n// }\n// export default BroadcasterPage;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcasterPage.js"],"names":["Component","io","render","Video","formatName","user","firstName","lastName","Welcome","Broadcast","componentDidMount","video","document","getElementById","console","log","peerConnection","RTCPeerConnection","socket","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","getTracks","forEach","track","addTrack","createOffer","sdp","setLocalDescription","emit","localDescription","catch","err0r","on","message","setRemoteDescription"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,QAAsB,qBAAtB;;AAEA,MAAMC,UAAU,GAAGC,IAAI,IAAIA,IAAI,CAACC,SAAL,GAAiB,GAAjB,GAAuBD,IAAI,CAACE,QAAvD;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAc,8BAAaD,UAAU,CAACC,IAAD,CAAvB,MAA9B;;AAEA,eAAe,MAAMI,SAAN,SAAwBT,SAAxB,CAAkC;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAU,EAAAA,iBAAiB,GAAE;AACf,UAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYJ,KAAxB;AAEA,UAAMK,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AACA,UAAMC,MAAM,GAAGjB,EAAE,EAAjB;AAEAkB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAACV,MAAAA,KAAK,EAAE,IAAR;AAAcW,MAAAA,KAAK,EAAE;AAArB,KAApC,EACKC,IADL,CACWC,MAAD,IAAY;AACdZ,MAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCY,SAAxC,GAAoDD,MAApD;AACAA,MAAAA,MAAM,CAACE,SAAP,GAAmBC,OAAnB,CAA2BC,KAAK,IAAIZ,cAAc,CAACa,QAAf,CAAwBD,KAAxB,EAA+BJ,MAA/B,CAApC;AACAR,MAAAA,cAAc,CAACc,WAAf,GACKP,IADL,CACUQ,GAAG,IAAIf,cAAc,CAACgB,mBAAf,CAAmCD,GAAnC,CADjB,EAEKR,IAFL,CAEU,YAAU;AACZL,QAAAA,MAAM,CAACe,IAAP,CAAY,OAAZ,EAAqBjB,cAAc,CAACkB,gBAApC;AACH,OAJL;AAKH,KATL,EAUKC,KAVL,CAUW,UAAUC,KAAV,EAAiB;AACpBtB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KAZL;AAcAG,IAAAA,MAAM,CAACmB,EAAP,CAAU,QAAV,EAAoB,UAAUC,OAAV,EAAkB;AAClCtB,MAAAA,cAAc,CAACuB,oBAAf,CAAoCD,OAApC;AACH,KAFD;AAIAnB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEV,MAAAA,KAAK,EAAE,IAAT;AAAeW,MAAAA,KAAK,EAAE;AAAtB,KAApC,EACKC,IADL,CACWC,MAAD,IAAY;AAAEb,MAAAA,KAAK,CAACc,SAAN,GAAkBD,MAAlB;AAA0B,KADlD,EAEKW,KAFL,CAEW,UAAUC,KAAV,EAAiB;AACpBtB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KAJL;AAKH;;AAEDb,EAAAA,MAAM,GAAG;AACL,WACI,4BACI;AAAO,MAAA,EAAE,EAAC,cAAV;AAAyB,MAAA,QAAQ;AAAjC,MADJ,EAGI,qCAHJ,CADJ;AAOH,GArD4C,CAwD7C;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA/F6C,C,CAqGjD;;AACA;;;;;AAMA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\nimport { Video } from '../components/Video';\r\n\r\nconst formatName = user => user.firstName + ' ' + user.lastName\r\n\r\nconst Welcome = ({ user }) => <p>Welcome, {formatName(user)}!</p>\r\n\r\nexport default class Broadcast extends Component {\r\n    \r\n    // WEBCAM VIDEO PLAYBACK; WORKING\r\n    // componentDidMount(){\r\n    //     const video = document.getElementById('videoElement');\r\n    //     console.log(\"VIDEO: \" + video);\r\n    //     navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n    //         .then((stream) => {video.srcObject=stream})\r\n    //         .catch(function (err0r) {\r\n    //             console.log(\"Something went wrong!\");\r\n    //         });\r\n    // }\r\n\r\n    componentDidMount(){\r\n        const video = document.getElementById('videoElement');\r\n        console.log(\"VIDEO: \" + video);\r\n\r\n        const peerConnection = new RTCPeerConnection();\r\n        const socket = io();\r\n\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n            .then((stream) => {\r\n                document.getElementById(\"videoElement\").srcObject = stream;\r\n                stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n                peerConnection.createOffer()\r\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                    .then(function(){\r\n                        socket.emit('offer', peerConnection.localDescription);\r\n                    });\r\n            })\r\n            .catch(function (err0r) {\r\n                console.log(\"Something went wrong!\");\r\n            });\r\n\r\n        socket.on('answer', function (message){\r\n            peerConnection.setRemoteDescription(message);\r\n        });\r\n\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((stream) => { video.srcObject = stream })\r\n            .catch(function (err0r) {\r\n                console.log(\"Something went wrong!\");\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <video id=\"videoElement\" autoPlay>\r\n                </video>\r\n                <p> video component </p>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    // componentDidMount(){\r\n    //     const video = document.getElementById('videoElement');\r\n    //     console.log(\"VIDEO: \" + video);\r\n\r\n    //     const peerConnection = new RTCPeerConnection();\r\n    //     const socket = io();\r\n\r\n    //     navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n    //         .then((stream) => {\r\n    //             peerConnection.addStream(stream);\r\n    //             peerConnection.createOffer()\r\n    //                 .then(sdp => peerConnection.setLocalDescription(sdp))\r\n    //                 .then(function(){\r\n    //                     socket.emit('offer', peerConnection.localDescription);\r\n    //                 });\r\n    //         })\r\n    //         .catch(function (err0r) {\r\n    //             console.log(\"Something went wrong!\");\r\n    //         });\r\n\r\n    //     socket.on('answer', function (message){\r\n    //         peerConnection.setRemoteDescription(message);\r\n    //     });\r\n\r\n    //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n    //         .then((stream) => { video.srcObject = stream })\r\n    //         .catch(function (err0r) {\r\n    //             console.log(\"Something went wrong!\");\r\n    //         });\r\n    // }\r\n\r\n    // render() {\r\n    //     return (\r\n    //         <>\r\n    //             <video id=\"videoElement\" autoPlay>\r\n    //             </video>\r\n    //             <p> video component </p>\r\n    //         </>\r\n    //     )\r\n    // }\r\n}\r\n\r\n\r\n\r\n\r\n//WORKING VIDEO CAMERA\r\n/*\r\nexport default () => (\r\n    <Video />\r\n)\r\n*/\r\n\r\n//ALSO WORKS\r\n\r\n// const BroadcasterPage = () => (\r\n//     <Video />\r\n// )\r\n// export default BroadcasterPage;\r\n\r\n\r\n// const BroadcasterPage = () => {\r\n    \r\n\r\n//     document.querySelector('cam').innerHTML='wew';\r\n\r\n//     return(\r\n//             <Text name=\"wew\"/>\r\n//     )\r\n//     return (\r\n//         <div>\r\n//             <video playsInline autoPlay muted></video>\r\n//             <script type=\"text/javascript\">\r\n\r\n\r\n//                 const video = document.querySelector('video');\r\n//                 navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n//                 .then((stream) => {video.srcObject=stream});\r\n//             </script>\r\n//             <p> broadcaster page </p>\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n// export default BroadcasterPage;\r\n"]},"metadata":{},"sourceType":"module"}