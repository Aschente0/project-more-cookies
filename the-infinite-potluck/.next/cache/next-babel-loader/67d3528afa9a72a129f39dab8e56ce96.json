{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport jwtDecode from 'jwt-decode';\n\nvar getQueryParams = function getQueryParams() {\n  var params = {};\n  window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n    params[$1] = $3;\n  });\n  return params;\n};\n\nvar Auth = /*#__PURE__*/function () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    _defineProperty(this, \"accessToken\", void 0);\n\n    _defineProperty(this, \"idToken\", void 0);\n\n    _defineProperty(this, \"expiresAt\", void 0);\n\n    _defineProperty(this, \"auth0\", new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid profile email'\n    }));\n\n    _defineProperty(this, \"extractInfoFromHash\", function () {\n      if (process.server) return;\n\n      var _getQueryParams = getQueryParams(),\n          id_token = _getQueryParams.id_token;\n\n      return {\n        token: id_token,\n        user_details: jwtDecode(id_token)\n      };\n    });\n\n    _defineProperty(this, \"getQueryParams\", function () {\n      var params = {};\n      window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, function ($0, $1, $2, $3) {\n        params[$1] = $3;\n      });\n      return params;\n    });\n\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve) {\n        _this.auth0.parseHash(function (err, authResult) {\n          var user_details = _this.extractInfoFromHash();\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult, user_details);\n\n            resolve(true);\n          } else if (err) {\n            console.log(err);\n            alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n            resolve(false);\n            window.location.replace('/');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult, user_details) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('user_details', _JSON$stringify(user_details.user_details)); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt; // navigate to the home route\n      //history.replace('/home');\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn');\n      localStorage.removeItem('user_details'); // navigate to the home route\n\n      window.location.replace('/');\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/lib/Auth.js"],"names":["auth0","AUTH_CONFIG","jwtDecode","getQueryParams","params","window","location","href","replace","$0","$1","$2","$3","Auth","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","process","server","id_token","token","user_details","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","resolve","parseHash","err","authResult","extractInfoFromHash","accessToken","idToken","setSession","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\r\nimport {AUTH_CONFIG} from './auth0-variables';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst getQueryParams = () => {\r\n    const params = {}\r\n    window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\r\n        params[$1] = $3\r\n    })\r\n    return params\r\n}\r\n\r\nexport default class Auth {\r\n    accessToken;\r\n    idToken;\r\n    expiresAt;\r\n\r\n    auth0 = new auth0.WebAuth({\r\n        domain: AUTH_CONFIG.domain,\r\n        clientID: AUTH_CONFIG.clientId,\r\n        redirectUri: AUTH_CONFIG.callbackUrl,\r\n        responseType: 'token id_token',\r\n        scope: 'openid profile email'\r\n    });\r\n\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n        this.getAccessToken = this.getAccessToken.bind(this);\r\n        this.getIdToken = this.getIdToken.bind(this);\r\n        this.renewSession = this.renewSession.bind(this);\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    extractInfoFromHash = () => {\r\n        if (process.server) return;\r\n        const {id_token} = getQueryParams();\r\n        return {\r\n            token: id_token,\r\n            user_details: (jwtDecode(id_token))\r\n        }\r\n    }\r\n\r\n    getQueryParams = () => {\r\n        const params = {}\r\n        window.location.href.replace(/([^(?|#)=&]+)(=([^&]*))?/g, ($0, $1, $2, $3) => {\r\n            params[$1] = $3\r\n        })\r\n        return params\r\n    }\r\n\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve)=>{\r\n            this.auth0.parseHash((err, authResult) => {\r\n                var user_details = this.extractInfoFromHash()\r\n                if (authResult && authResult.accessToken && authResult.idToken) {\r\n                    this.setSession(authResult, user_details);\r\n                    resolve(true);\r\n                } else if (err) {\r\n                    console.log(err);\r\n                    alert(`Error: ${err.error}. Check the console for further details.`);\r\n                    resolve(false);\r\n                    window.location.replace('/');\r\n                }\r\n            \r\n            });\r\n        })\r\n        \r\n    }\r\n\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n\r\n    getIdToken() {\r\n        return this.idToken;\r\n    }\r\n\r\n    setSession(authResult, user_details) {\r\n        // Set isLoggedIn flag in localStorage\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('user_details', JSON.stringify(user_details.user_details));\r\n\r\n        // Set the time that the access token will expire at\r\n        let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n        this.accessToken = authResult.accessToken;\r\n        this.idToken = authResult.idToken;\r\n        this.expiresAt = expiresAt;\r\n\r\n        // navigate to the home route\r\n        //history.replace('/home');\r\n    }\r\n\r\n    renewSession() {\r\n        this.auth0.checkSession({}, (err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n            } else if (err) {\r\n                this.logout();\r\n                console.log(err);\r\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n            }\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        // Remove tokens and expiry time\r\n        this.accessToken = null;\r\n        this.idToken = null;\r\n        this.expiresAt = 0;\r\n\r\n        // Remove isLoggedIn flag from localStorage\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('user_details');\r\n\r\n        // navigate to the home route\r\n        window.location.replace('/');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the\r\n        // access token's expiry time\r\n        let expiresAt = this.expiresAt;\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}