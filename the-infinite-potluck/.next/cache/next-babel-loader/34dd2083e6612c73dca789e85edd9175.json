{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\nexport default class Medium extends Component {\n  // constructor(props){\n  //     super(props);\n  //     this.state={\n  //         hello:''\n  //     }\n  // }\n  // componentDidMount(){\n  //     this.socket=io()\n  //     this.socket.emit('watcher');\n  //     this.socket.on('now', (data) => {\n  //         this.setState({\n  //             hello: data.message\n  //         })\n  //     })\n  // }\n  // render(){\n  //     return(\n  //         <div>\n  //             <h1>{this.state.hello}</h1>\n  //             <p>test</p>\n  //         </div>\n  //     )\n  // }\n  componentDidMount() {\n    const peerConnection = new RTCPeerConnection();\n    this.socket = io();\n    this.video = document.querySelector('video');\n    this.socket.on('offer', function (message) {\n      peerConnection.setRemoteDescription(message).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(function () {\n        this.socket.emit('answer', peerConnection.localDescription);\n      });\n    });\n\n    peerConnection.onaddstream = function (event) {\n      this.video.srcObject = event.stream;\n    };\n  }\n\n  render() {\n    return __jsx(\"video\", {\n      playsinline: true,\n      autoplay: true,\n      muted: true\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/watcher.js"],"names":["Component","io","render","Medium","componentDidMount","peerConnection","RTCPeerConnection","socket","video","document","querySelector","on","message","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","onaddstream","event","srcObject","stream"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC1C;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAI,EAAAA,iBAAiB,GAAE;AACf,UAAMC,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AAEA,SAAKC,MAAL,GAAcN,EAAE,EAAhB;AACA,SAAKO,KAAL,GAAaC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb;AAEA,SAAKH,MAAL,CAAYI,EAAZ,CAAe,OAAf,EAAwB,UAAUC,OAAV,EAAkB;AACtCP,MAAAA,cAAc,CAACQ,oBAAf,CAAoCD,OAApC,EACCE,IADD,CACM,MAAMT,cAAc,CAACU,YAAf,EADZ,EAECD,IAFD,CAEME,GAAG,IAAIX,cAAc,CAACY,mBAAf,CAAmCD,GAAnC,CAFb,EAGCF,IAHD,CAGM,YAAW;AACb,aAAKP,MAAL,CAAYW,IAAZ,CAAiB,QAAjB,EAA2Bb,cAAc,CAACc,gBAA1C;AACH,OALD;AAMH,KAPD;;AASAd,IAAAA,cAAc,CAACe,WAAf,GAA6B,UAAUC,KAAV,EAAiB;AAC1C,WAAKb,KAAL,CAAWc,SAAX,GAAuBD,KAAK,CAACE,MAA7B;AACH,KAFD;AAGH;;AAEDrB,EAAAA,MAAM,GAAE;AACJ,WACI;AAAO,MAAA,WAAW,MAAlB;AAAmB,MAAA,QAAQ,MAA3B;AAA4B,MAAA,KAAK;AAAjC,MADJ;AAGH;;AArDyC","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\nexport default class Medium extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     this.state={\r\n    //         hello:''\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.socket=io()\r\n    //     this.socket.emit('watcher');\r\n    //     this.socket.on('now', (data) => {\r\n    //         this.setState({\r\n    //             hello: data.message\r\n    //         })\r\n    //     })\r\n    // }\r\n    \r\n    // render(){\r\n    //     return(\r\n    //         <div>\r\n    //             <h1>{this.state.hello}</h1>\r\n    //             <p>test</p>\r\n    //         </div>\r\n            \r\n    //     )\r\n    // }\r\n\r\n    componentDidMount(){\r\n        const peerConnection = new RTCPeerConnection();\r\n\r\n        this.socket = io();\r\n        this.video = document.querySelector('video');\r\n\r\n        this.socket.on('offer', function (message){\r\n            peerConnection.setRemoteDescription(message)\r\n            .then(() => peerConnection.createAnswer())\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then(function() {\r\n                this.socket.emit('answer', peerConnection.localDescription);\r\n            });\r\n        });\r\n\r\n        peerConnection.onaddstream = function (event) {\r\n            this.video.srcObject = event.stream;\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <video playsinline autoplay muted></video>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}