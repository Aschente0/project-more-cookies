{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom'; // const Broadcaster = () => {\n\nexport default class Medium extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hello: ''\n    };\n  }\n\n  componentDidMount() {\n    document.getElementById(\"test\").innerHTML = `tf bro`;\n    this.socket = io();\n    this.socket.emit('broadcaster');\n    this.socket.on('now', data => {\n      this.setState({\n        hello: data.message\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h1\", null, this.state.hello), __jsx(\"video\", {\n      id: \"video\",\n      autoplay: true\n    }), __jsx(\"div\", {\n      id: \"test\"\n    }));\n  }\n\n} // componentDidmount(){\n//         const peerConnection = new RTCPeerConnection();\n//         const socket = io();\n//         navigator.mediaDevices.getUserMedia({\n//             video: true\n//         })\n//         .then(function(stream){\n//             peerConnection.addStream(stream);\n//             peerConnection.createOffer()\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\n//             .then(function(){\n//                 socket.emit('offer', peerConnection.localDescription);\n//             });\n//         });\n//         socket.on('answer', function (message){\n//             peerConnection.setRemoteDescription(message);\n//         });\n//     // }\n//     // render(){\n//         return(\n//             <div>\n//                 <h1>{socket.id}</h1>\n//                 <p> hello world s</p>\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\n//                 <div id=\"test\">\n//                 </div>\n//             </div>\n//         )\n//     // }\n// }\n// export default Broadcaster;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Medium","constructor","props","state","hello","componentDidMount","document","getElementById","innerHTML","socket","emit","on","data","setState","message"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CAEA;;AACA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC1CI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAC;AADC,KAAX;AAGH;;AAEDC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA6C,QAA7C;AACA,SAAKC,MAAL,GAAYX,EAAE,EAAd;AACA,SAAKW,MAAL,CAAYC,IAAZ,CAAiB,aAAjB;AACA,SAAKD,MAAL,CAAYE,EAAZ,CAAe,KAAf,EAAuBC,IAAD,IAAU;AAC5B,WAAKC,QAAL,CAAc;AACVT,QAAAA,KAAK,EAAEQ,IAAI,CAACE;AADF,OAAd;AAGH,KAJD;AAKH;;AAEDf,EAAAA,MAAM,GAAE;AACJ,WACI,mBACI,kBAAK,KAAKI,KAAL,CAAWC,KAAhB,CADJ,EAEI;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,QAAQ;AAA1B,MAFJ,EAII;AAAK,MAAA,EAAE,EAAC;AAAR,MAJJ,CADJ;AAUH;;AA/ByC,C,CAiC1C;AACJ;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\n// const Broadcaster = () => {\r\nexport default class Medium extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hello:''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.getElementById(\"test\").innerHTML = `tf bro`;\r\n        this.socket=io()\r\n        this.socket.emit('broadcaster');\r\n        this.socket.on('now', (data) => {\r\n            this.setState({\r\n                hello: data.message\r\n            })\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.hello}</h1>\r\n                <video id=\"video\" autoplay>\r\n                </video>\r\n                <div id=\"test\">\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n    // componentDidmount(){\r\n//         const peerConnection = new RTCPeerConnection();\r\n//         const socket = io();\r\n\r\n//         navigator.mediaDevices.getUserMedia({\r\n//             video: true\r\n//         })\r\n//         .then(function(stream){\r\n//             peerConnection.addStream(stream);\r\n\r\n//             peerConnection.createOffer()\r\n//             .then(sdp => peerConnection.setLocalDescription(sdp))\r\n//             .then(function(){\r\n//                 socket.emit('offer', peerConnection.localDescription);\r\n//             });\r\n//         });\r\n\r\n//         socket.on('answer', function (message){\r\n//             peerConnection.setRemoteDescription(message);\r\n//         });\r\n//     // }\r\n\r\n//     // render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1>{socket.id}</h1>\r\n//                 <p> hello world s</p>\r\n//                 <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\r\n\r\n//                 <div id=\"test\">\r\n//                 </div>\r\n//             </div>\r\n            \r\n//         )\r\n//     // }\r\n\r\n// }\r\n// export default Broadcaster;"]},"metadata":{},"sourceType":"module"}