{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom'; // const Broadcaster = () => {\n\nexport default class Medium extends Component {\n  // constructor(props){\n  //     super(props);\n  //     this.state={\n  //         hello:''\n  //     }\n  // }\n  // componentDidMount(){\n  //     this.socket=io()\n  //     this.socket.emit('broadcaster');\n  //     this.socket.on('now', (data) => {\n  //         this.setState({\n  //             hello: data.message\n  //         })\n  //     })\n  // }\n  // render(){\n  //     return(\n  //         <div>\n  //             <h1>{this.state.hello}</h1>\n  //             <p>test</p>\n  //         </div>\n  //     )\n  // }\n  componentDidmount() {\n    const peerConnection = new RTCPeerConnection();\n    const socket = io();\n    document.getElementById('test').innerHTML = 'nice';\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(function (stream) {\n      peerConnection.addStream(stream);\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(function () {\n        socket.emit('offer', peerConnection.localDescription);\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"p\", null, \" hello world s\"), __jsx(\"video\", {\n      id: \"video\",\n      width: \"640\",\n      height: \"480\",\n      playsInline: true,\n      autoPlay: true,\n      muted: true\n    }), __jsx(\"div\", {\n      id: \"test\"\n    }));\n  }\n\n} // export default Broadcaster;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Medium","componentDidmount","peerConnection","RTCPeerConnection","socket","document","getElementById","innerHTML","navigator","mediaDevices","getUserMedia","video","then","stream","addStream","createOffer","sdp","setLocalDescription","emit","localDescription"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CAEA;;AACA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC1C;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAI,EAAAA,iBAAiB,GAAE;AACf,UAAMC,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AACA,UAAMC,MAAM,GAAGN,EAAE,EAAjB;AAEAO,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4C,MAA5C;AAEAC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAChCC,MAAAA,KAAK,EAAE;AADyB,KAApC,EAGCC,IAHD,CAGM,UAASC,MAAT,EAAgB;AAClBX,MAAAA,cAAc,CAACY,SAAf,CAAyBD,MAAzB;AAEAX,MAAAA,cAAc,CAACa,WAAf,GACCH,IADD,CACMI,GAAG,IAAId,cAAc,CAACe,mBAAf,CAAmCD,GAAnC,CADb,EAECJ,IAFD,CAEM,YAAU;AACZR,QAAAA,MAAM,CAACc,IAAP,CAAY,OAAZ,EAAqBhB,cAAc,CAACiB,gBAApC;AACH,OAJD;AAKH,KAXD;AAYH;;AAEDpB,EAAAA,MAAM,GAAE;AACJ,WACI,mBACI,kCADJ,EAEI;AAAO,MAAA,EAAE,EAAC,OAAV;AAAkB,MAAA,KAAK,EAAC,KAAxB;AAA8B,MAAA,MAAM,EAAC,KAArC;AAA2C,MAAA,WAAW,MAAtD;AAAuD,MAAA,QAAQ,MAA/D;AAAgE,MAAA,KAAK;AAArE,MAFJ,EAII;AAAK,MAAA,EAAE,EAAC;AAAR,MAJJ,CADJ;AAUH;;AA5DyC,C,CA+D9C","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\n// const Broadcaster = () => {\r\nexport default class Medium extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     this.state={\r\n    //         hello:''\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.socket=io()\r\n    //     this.socket.emit('broadcaster');\r\n    //     this.socket.on('now', (data) => {\r\n    //         this.setState({\r\n    //             hello: data.message\r\n    //         })\r\n    //     })\r\n    // }\r\n    \r\n    // render(){\r\n    //     return(\r\n    //         <div>\r\n    //             <h1>{this.state.hello}</h1>\r\n    //             <p>test</p>\r\n    //         </div>\r\n            \r\n    //     )\r\n    // }\r\n\r\n    componentDidmount(){\r\n        const peerConnection = new RTCPeerConnection();\r\n        const socket = io();\r\n\r\n        document.getElementById('test').innerHTML = 'nice';\r\n\r\n        navigator.mediaDevices.getUserMedia({\r\n            video: true\r\n        })\r\n        .then(function(stream){\r\n            peerConnection.addStream(stream);\r\n\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then(function(){\r\n                socket.emit('offer', peerConnection.localDescription);\r\n            });\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p> hello world s</p>\r\n                <video id=\"video\" width=\"640\" height=\"480\" playsInline autoPlay muted></video>\r\n\r\n                <div id=\"test\">\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n// export default Broadcaster;"]},"metadata":{},"sourceType":"module"}