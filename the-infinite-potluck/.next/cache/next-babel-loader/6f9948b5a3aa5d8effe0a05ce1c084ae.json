{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport { render } from 'react-dom';\n\nvar Broadcaster = function Broadcaster() {\n  // export default class Medium extends Component {\n  // constructor(props){\n  //     super(props);\n  //     this.state={\n  //         hello:''\n  //     }\n  // }\n  // componentDidMount(){\n  //     this.socket=io()\n  //     this.socket.emit('broadcaster');\n  //     this.socket.on('now', (data) => {\n  //         this.setState({\n  //             hello: data.message\n  //         })\n  //     })\n  // }\n  // render(){\n  //     return(\n  //         <div>\n  //             <h1>{this.state.hello}</h1>\n  //             <p>test</p>\n  //         </div>\n  //     )\n  // }\n  // componentDidmount(){\n  var peerConnection = new RTCPeerConnection();\n  var socket = io();\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  }).then(function (stream) {\n    peerConnection.addStream(stream);\n    peerConnection.createOffer().then(function (sdp) {\n      return peerConnection.setLocalDescription(sdp);\n    }).then(function () {\n      socket.emit('offer', peerConnection.localDescription);\n    });\n  }); // }\n  // render(){\n\n  return __jsx(\"div\", null, __jsx(\"h1\", null, socket.id), __jsx(\"p\", null, \" hello world\"), __jsx(\"video\", {\n    id: \"video\",\n    playsInline: true,\n    autoPlay: true,\n    muted: true\n  })); // }\n};\n\nexport default Broadcaster;","map":{"version":3,"sources":["C:/Users/carlo_fqwuyel/Desktop/UofT/CSCC09/project/project-project-more-cookies/the-infinite-potluck/pages/broadcaster.js"],"names":["Component","io","render","Broadcaster","peerConnection","RTCPeerConnection","socket","navigator","mediaDevices","getUserMedia","audio","video","then","stream","addStream","createOffer","sdp","setLocalDescription","emit","localDescription","id"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC1B;AACI;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACI,MAAMC,cAAc,GAAG,IAAIC,iBAAJ,EAAvB;AAEA,MAAMC,MAAM,GAAGL,EAAE,EAAjB;AAEAM,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAChCC,IAAAA,KAAK,EAAE,IADyB;AAEhCC,IAAAA,KAAK,EAAE;AAFyB,GAApC,EAICC,IAJD,CAIM,UAASC,MAAT,EAAgB;AAClBT,IAAAA,cAAc,CAACU,SAAf,CAAyBD,MAAzB;AAEAT,IAAAA,cAAc,CAACW,WAAf,GACCH,IADD,CACM,UAAAI,GAAG;AAAA,aAAIZ,cAAc,CAACa,mBAAf,CAAmCD,GAAnC,CAAJ;AAAA,KADT,EAECJ,IAFD,CAEM,YAAU;AACZN,MAAAA,MAAM,CAACY,IAAP,CAAY,OAAZ,EAAqBd,cAAc,CAACe,gBAApC;AACH,KAJD;AAKH,GAZD,EAnCkB,CAgDtB;AAEA;;AACI,SACI,mBACI,kBAAKb,MAAM,CAACc,EAAZ,CADJ,EAEI,gCAFJ,EAGI;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,WAAW,MAA7B;AAA8B,IAAA,QAAQ,MAAtC;AAAuC,IAAA,KAAK;AAA5C,IAHJ,CADJ,CAnDkB,CA2DtB;AAEH,CA7DD;;AA8DA,eAAejB,WAAf","sourcesContent":["import { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { render } from 'react-dom';\r\n\r\nconst Broadcaster = () => {\r\n// export default class Medium extends Component {\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     this.state={\r\n    //         hello:''\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.socket=io()\r\n    //     this.socket.emit('broadcaster');\r\n    //     this.socket.on('now', (data) => {\r\n    //         this.setState({\r\n    //             hello: data.message\r\n    //         })\r\n    //     })\r\n    // }\r\n    \r\n    // render(){\r\n    //     return(\r\n    //         <div>\r\n    //             <h1>{this.state.hello}</h1>\r\n    //             <p>test</p>\r\n    //         </div>\r\n            \r\n    //     )\r\n    // }\r\n\r\n    // componentDidmount(){\r\n        const peerConnection = new RTCPeerConnection();\r\n\r\n        const socket = io();\r\n\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true\r\n        })\r\n        .then(function(stream){\r\n            peerConnection.addStream(stream);\r\n\r\n            peerConnection.createOffer()\r\n            .then(sdp => peerConnection.setLocalDescription(sdp))\r\n            .then(function(){\r\n                socket.emit('offer', peerConnection.localDescription);\r\n            });\r\n        });\r\n    // }\r\n\r\n    // render(){\r\n        return(\r\n            <div>\r\n                <h1>{socket.id}</h1>\r\n                <p> hello world</p>\r\n                <video id=\"video\" playsInline autoPlay muted></video>\r\n            </div>\r\n            \r\n        )\r\n    // }\r\n\r\n}\r\nexport default Broadcaster;"]},"metadata":{},"sourceType":"module"}